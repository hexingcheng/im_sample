syntax = "proto3";
option go_package = "./;grpc";

package grpc;
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "wallet.proto";
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "wallet service";
        description: "wallet service の Web API 仕様書です。";
        version: "1.0";
    }
    host: "dev-api.only-live.com";
    schemes: HTTPS;
    responses: {
      key: "401";
      value: {
        description: "unauthenticated(code = UNAUTHENTICATED)";
        schema: {
          json_schema: {
            ref: ".ErrorResponse";
          }
        }
      }
    }
};

service WalletService {
    //only own fan
    rpc GetBalanceByFanUUID (GetBalanceByFanUUIDRequest) returns (Wallet) {
        option (google.api.http) = {
          get: "/v1/wallet/fans/{fan_uuid}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
          security: {};
          responses: {
            key: "404";
            value: {
              description: "not found(code = NOT_FOUND)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "500";
            value: {
              description: "server error(code = API_ERROR_SIMPLY_WALLET or INTERNAL)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
         }
        };
      }
    //only own fan
    rpc GetBillingByMonth (GetBillingByMonthReq) returns (GetBillingByMonthRes) {
        option (google.api.http) = {
        get: "/v1/billing/fans/{fan_uuid}"
      };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
          security: {};
          responses: {
            key: "400";
            value: {
              description: "not found(code = INVALID_SIMPLY_WALLET)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "404";
            value: {
              description: "not found(code = NOT_FOUND)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "500";
            value: {
              description: "server error(code = API_ERROR_SIMPLY_WALLET or INTERNAL)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
         }
        };
    }
    //only own fan
    rpc ConsumeBalance (ConsumeBalanceRequest) returns (ConsumeBalanceResponse) {
        option (google.api.http) = {
        put: "/v1/wallet/consume"
        body: "*"
      };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
          security: {};
          responses: {
            key: "400";
            value: {
              description: "not found(code = INVALID_SIMPLY_WALLET)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "404";
            value: {
              description: "not found(code = NOT_FOUND)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "500";
            value: {
              description: "server error(code = API_ERROR_SIMPLY_WALLET or INTERNAL)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
         }
        };
    }
    //only own fan
    rpc AppleIapVerification (AppleIapVerificationRequest) returns (Wallet) {
        option (google.api.http) = {
        post: "/v1/verification/refill"
        body: "*"
      };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
          security: {};
          responses: {
            key: "400";
            value: {
              description: "not found(code = CLIENT_ERROR_SIMPLY_FACADE)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "404";
            value: {
              description: "not found(code = NOT_FOUND)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "500";
            value: {
              description: "server error(code = API_ERROR_SIMPLY_FACADE or INTERNAL)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
         }
          responses: {
            key: "502";
            value: {
              description: "server error(code = GATEWAY_ERROR_SIMPLY_FACADE)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
         }
          responses: {
            key: "503";
            value: {
              description: "server error(code = UNAVAILABLE_SIMPLY_FACADE)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
         }
        };
    }
  //インセンティブを発行します
  //
  // gatewayで公開しない
  rpc CreateIncentive (CreateIncentiveRequest) returns (CreateIncentiveResponse) {}

  //fanにpointを付与します
  //
  // gatewayで公開しない
  rpc PointRefill(PointRefillRequest) returns (google.protobuf.Empty) {}

  //有償残高があるファンの数を取得
  rpc GetHavePaidBalanceFanNum(GetHavePaidBalanceFanNumRequest) returns (GetHavePaidBalanceFanNumResponse) {}
}

message GetHavePaidBalanceFanNumRequest {
}
message GetHavePaidBalanceFanNumResponse {
  uint32 num = 1;
  uint32 total_paid_num = 2;
}

message GetBillingByMonthReq {
    string fan_uuid = 1;
}
message GetBillingByMonthRes {
    int64 billing_amount = 1;
}

message GetBalanceByFanUUIDRequest {
    string fan_uuid = 1;
}

message ConsumeBalanceRequest {
    string fan_uuid = 1;
    uint32 fan_meeting_id = 2;
    NumExtension num_extension_times = 3; // 何回分の延長かどうか。 最大 3回 まで
}

message ConsumeBalanceResponse {
    string body  = 1; // Wallet Status is encrypt aes.
}

message AppleIapVerificationRequest {
    string fan_uuid = 1;
    string productCode = 2;
    string receiptToken = 3;
}

message CreateIncentiveRequest {
  string incentive_code = 1;
  string incentive_name = 2;
  uint32 incentive_point = 3;
}

message CreateIncentiveResponse {
  string incentive_code = 1;
  string incentive_name = 2;
  int64 incentive_point = 3;
  int64 start_at = 4;
  int64 end_at = 5;
  int64 point_expire_days = 6;
}

message PointRefillRequest {
  string fan_annotation_id = 1;
  IncentiveCode incentive_code = 2;
  int64 point = 3;
  string expire_date =4;
}
