syntax = "proto3";
option go_package = "./;grpc";

package grpc;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "fanmeeting.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "reservation.proto";

service ReservationService {
  //only own fan
  rpc CreateReservation (CreateReservationRequest) returns (CreateReservationResponse) {
    option (google.api.http) = {
        post: "/v1/reservations"
        body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "400";
        value: {
          description: "予約がいっぱいだった(code = FULL_OF_RESERVATION)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
      responses: {
        key: "408";
        value: {
          description: "同時予約が多発してることによるtransaction timeout(code = TRANSACTION_TIMEOUT)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
      responses: {
        key: "409";
        value: {
          description: "他の予約をしていた場合(code = ALREADY_EXISTS)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }

  //only own fan
  rpc GetReservation (GetReservationRequest) returns (Reservation) {
    option (google.api.http) = {
        get: "/v1/reservations/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }
  //ファンミーティングから通話履歴を取得する
  rpc ListCallHistoryByFanMeetingID (ListCallHistoryByFanMeetingIDRequest) returns (ListCallHistoryByFanMeetingIDResponse) {
      option (google.api.http) = {
        get: "/v1/fan-meetings/{id}/call_history"
      };
  }
  //only own fan
  rpc GetUnfinishedReservationByFan (GetUnfinishedReservationByFanRequest) returns (GetUnfinishedReservationByFanResponse) {
    option (google.api.http) = {
        get: "/v1/reservations/wait/fans/{fan_uuid}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }
  // インフルエンサーとファンの過去の通話回数を返す
  //only own influencers
  rpc GetNumCalls (GetNumCallsRequest) returns (GetNumCallsResponse) {
    option (google.api.http) = {
      get: "/v1/reservations/fans/{fan_uuid}/influencers/{influencer_uuid}"
    };
  }
  //only own fan
  rpc CountNumReservedFan (CountNumReservedFanRequest) returns (CountNumReservedFanResponse) {
    option (google.api.http) = {
        get: "/v1/reservations/fans/{fan_uuid}/fan-meeting/{fan_meeting_id}"
    };
  }
  //only own fan
  rpc DeleteReservation (DeleteReservationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
        delete: "/v1/reservations/{id}"
    };
  }
  // チェキをアップロードし、reservations テーブルの cheki_image_uri にデータを保存
  //only own influencer
  rpc UploadCheki (UploadChekiRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/reservations/upload/cheki"
      body: "*"
    };
  }

  //ファンミーティングに参加してるファンを退出させる
  rpc RemoveFanByReservation (RemoveFanByReservationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
        post: "/v1/reservations/id/{id}/remove/fan"
      };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }
  // テンセントのIM logを送信
  //only own influencer
  rpc UploadTencentInstantMessageLogByReservation (UploadTencentInstantMessageLogByReservationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/reservations/upload/tencent-log/im"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "401";
        value: {
          description: "unauthenticated(code = UNAUTHENTICATED)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }

  // テンセントのLiteAV logを送信
  //only own influencer
  rpc UploadTencentLiteAVLogByReservation (UploadTencentLiteAVLogByReservationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/reservations/upload/tencent-log/lite-av"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "401";
        value: {
          description: "unauthenticated(code = UNAUTHENTICATED)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }

}

message CreateReservationRequest {
  uint32 fan_meeting_id = 1;
  string fan_uuid = 2;
  uint32 serial_code_id = 3;
}

message CreateReservationResponse {
  uint32 id = 1;
}

message GetReservationRequest {
  uint32 id = 1;
}

message GetUnfinishedReservationByFanRequest {
  string fan_uuid = 1;
}

message GetUnfinishedReservationByFanResponse {
  FanMeeting fan_meeting = 1;
  uint32 wait_num = 2;         //自分の前に何人待っているか
}

message GetNumCallsRequest {
  string fan_uuid = 1;
  string influencer_uuid = 2;
}

message GetNumCallsResponse {
  uint32 numCalls = 1;
}

message CountNumReservedFanRequest {
  string fan_uuid = 1;
  uint32 fan_meeting_id = 2;
}

message CountNumReservedFanResponse {
  bool is_reserved = 1;
  uint32 num_reserved_fan = 2;
}

message DeleteReservationRequest {
  uint32 id = 1;
}

message UploadChekiRequest {
  uint32 id = 1;
  bytes image_byte = 2;
}

message RemoveFanByReservationRequest {
  uint32 id = 1;
}

message UploadTencentInstantMessageLogByReservationRequest {
  string fan_uuid = 1;
  string file_name = 2;
  bytes log_file_byte = 3;
}

message UploadTencentLiteAVLogByReservationRequest {
  string fan_uuid = 1;
  string file_name = 2;
  bytes log_file_byte = 3;
}

message ListCallHistoryByFanMeetingIDRequest {
  uint32 id = 1;
}

message ListCallHistoryByFanMeetingIDResponse {
  repeated ReservationAndFan call_history = 1;
}
