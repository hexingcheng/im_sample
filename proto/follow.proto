syntax = "proto3";
option go_package = "./;grpc";

package grpc;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "influencer.proto";
import "protoc-gen-swagger/options/annotations.proto";

service FollowService {
  //fanがインフルエンサーをフォローする
  // only own fan
  rpc CreateFollow (CreateFollowRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        post: "/v1/follows"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "409";
          value: {
            description: "すでにフォローしている時(code = ALREADY_EXIST).";
            schema: {
                json_schema: {
                    ref: ".ErrorResponse";
                }
            }
          }
        };
      };
  }
  // only own fan
  rpc ListFollowsByFanUUID (ListFollowsByFanUUIDRequest) returns (ListFollowsByFanUUIDResponse) {
      option (google.api.http) = {
        get: "/v1/follows"
      };
  }
  
  // only own fan
  rpc ListUnFollowsByFanUUID (ListUnFollowsByFanUUIDRequest) returns (ListUnFollowsByFanUUIDResponse) {
    option (google.api.http) = {
      get: "/v1/unfollows"
    };
  }

  // only own fan
  rpc DeleteFollow (DeleteFollowRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/follows/fan/{fan_uuid}/influencer/{influencer_uuid}"
      };
  }

  // only own influencer
  rpc GetFollowerNumByInfluencerUUID (GetFollowerNumByInfluencerUUIDRequest) returns (GetFollowerNumByInfluencerUUIDResponse) {
      option (google.api.http) = {
        get: "/v1/follows/influencer/{influencer_uuid}/follower_num"
      };
  }
}

message CreateFollowRequest {
  string fan_uuid = 1;
  string influencer_uuid = 2;
}

message ListFollowsByFanUUIDRequest {
  uint32 page_size = 1;
  string page_token = 2;
  string fan_uuid = 3;
}

message ListFollowsByFanUUIDResponse {
  repeated Influencer influencer = 1;
  string next_page_token = 2;
}

message ListUnFollowsByFanUUIDRequest {
  string page_token = 1;
  string fan_uuid = 2;
}

message ListUnFollowsByFanUUIDResponse {
  repeated Influencer influencer = 1;
  string next_page_token = 2;
}


message DeleteFollowRequest {
  string fan_uuid = 1;
  string influencer_uuid = 2;
}

message Follow {
  string fan_uuid = 1;
  string influencer_uuid = 2;
}

message GetFollowerNumByInfluencerUUIDRequest {
  string influencer_uuid = 1;
}

message GetFollowerNumByInfluencerUUIDResponse {
  uint32 follower_num = 1;
}