syntax = "proto3";
option go_package = "./;grpc";

package grpc;
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "message.proto";
import "influencer.proto";
import "google/protobuf/timestamp.proto";

service MessageService {
    rpc CreateMessageByInfluencer (CreateMessageByInfluencerRequest) returns (CreateMessageByInfluencerResponse) {
        option (google.api.http) = {
          post: "/v1/messages/influencers/{influencer_uuid}",
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
          security: {};
          responses: {
            key: "404";
            value: {
              description: "not found(code = NOT_FOUND)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
          }
          responses: {
            key: "500";
            value: {
              description: "server error(code = API_ERROR_SIMPLY_WALLET or INTERNAL)";
              schema: {
                json_schema: {
                  ref: ".ErrorResponse";
                }
              }
            }
         }
        };
      }
    rpc ListMessageByFanUUID (ListMessageByFanUUIDRequest) returns (ListMessageByFanUUIDResponse) {
        option (google.api.http) = {
          get: "/v1/fans/{fan_uuid}/talk_rooms/{talk_room_uuid}/messages"
        };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "401";
          value: {
            description: "unauthenticated(code = UNAUTHENTICATED)";
            schema: {
              json_schema: {
                ref: ".ErrorResponse";
              }
            }
          }
        }
        responses: {
          key: "404";
          value: {
            description: "not found(code = NOT_FOUND)";
            schema: {
              json_schema: {
                ref: ".ErrorResponse";
              }
            }
          }
        }
      };
    }
    rpc ListJoinedRoomByFan (ListJoinedRoomByFanRequest) returns (ListJoinedRoomByFanResponse) {
      option (google.api.http) = {
        get: "/v1/fans/{fan_uuid}/joined_rooms",
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "404";
          value: {
            description: "not found(code = NOT_FOUND)";
            schema: {
              json_schema: {
                ref: ".ErrorResponse";
              }
            }
          }
        }
        responses: {
          key: "500";
          value: {
            description: "server error(code = API_ERROR_SIMPLY_WALLET or INTERNAL)";
            schema: {
              json_schema: {
                ref: ".ErrorResponse";
              }
            }
          }
        }
      };
    }
}

message CreateMessageByInfluencerRequest {
  uint32 reservation_id = 1;
  string text = 2;
  string influencer_uuid = 4;
  string fan_uuid = 5;
}

message CreateMessageByInfluencerResponse {
  uint32 id = 1;
}

message ListMessageByFanUUIDRequest {
  string talk_room_uuid = 1;
  string fan_uuid = 2;
  int64 next_seek_date = 3;
}

message ListMessageByFanUUIDResponse {
  repeated Message messages = 1;
  int64 next_seek_date = 2;
}

message ListJoinedRoomByFanRequest {
  string fan_uuid = 1;
}

message ListJoinedRoomByFanResponse {
  repeated Room joined_rooms = 1;
  message Room {
    JoinedRoom joined_room = 1;
    Influencer influencer = 2;
    string latest_message = 3;
    google.protobuf.Timestamp latest_message_updated_at = 4;
  }
}