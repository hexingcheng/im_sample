syntax = "proto3";
option go_package = "./;grpc";

package grpc;
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "influencer.proto";
import "fanmeeting.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "onlylive";
        description: "onlylive backend service の Web API 仕様書です。";
        version: "1.0";
    }
    host: "dev-api.only-live.com";
    schemes: HTTPS;
    responses: {
      key: "401";
      value: {
        description: "unauthenticated(code = UNAUTHENTICATED)";
        schema: {
          json_schema: {
            ref: ".ErrorResponse";
          }
        }
      }
    }
    responses: {
      key: "500";
      value: {
        description: "server error(code = INTERNAL)";
        schema: {
          json_schema: {
            ref: ".ErrorResponse";
          }
        }
      }
    }
    security_definitions: {
    security: {
      key: "x-api-jwt"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "x-api-jwt"
        description: "user specific token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "x-api-jwt"
    }
  }
};

service AuthService {
  // ファン新規登録
  //
  //firebase jwt
  rpc FanSignUp (FanSignUpRequest) returns (FanSignUpResponse) {
      option (google.api.http) = {
        post: "/v1/fans/signup"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "409";
          value: {
            description: "電話番号が存在している(code = ALREADY_EXIST_PHONE_NUMBER).";
                    schema: {
                        json_schema: {
                            ref: ".ErrorResponse";
                        }
                    }
          }
        };
      };
  }

  // ファンログイン
  //
  rpc FanSignIn (FanSignInRequest) returns (FanSignInResponse) {
      option (google.api.http) = {
        post: "/v1/fans/signin"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "409";
          value: {
            description: "電話番号が存在している(code = ALREADY_EXIST_PHONE_NUMBER).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
      };
  }

  // ファンのリフレッシュトークン
  //
  //
  rpc FanRefreshToken (FanRefreshTokenRequest) returns (FanRefreshTokenResponse) {
      option (google.api.http) = {
        post: "/v1/fans/refresh/token"
        body: "*"
      };
  }

  // インフルエンサ 新規登録
  //
  //firebase jwt
  rpc InfluencerSignIn (InfluencerSignInRequest) returns (InfluencerSignInResponse) {
    option (google.api.http) = {
      post: "/v1/influencers/signin"
      body: "*"
    };
  }

  // インフルエンサ　リフレッシュトークン
  //
  //
  rpc InfluencerRefreshToken (InfluencerRefreshTokenRequest) returns (InfluencerRefreshTokenResponse) {
      option (google.api.http) = {
        post: "/v1/influencers/refresh/token"
        body: "*"
      };
  }

  // インフルエンサー新規登録
  //
  // gatewayで公開しない
  rpc InfluencerSignUp (InfluencerSignUpRequest) returns (InfluencerSignUpResponse) {}
}

//firebase-access-tokenはheaderに付与
message FanSignUpRequest {
  string phone_number = 1;
  string password = 2;
  string aps_token = 3;
}

message FanSignUpResponse {
  string api_token = 1;
  string uuid = 2;
}

//firebase-access-tokenはheaderに付与
message FanSignInRequest {
  string phone_number = 1;
  string password = 2;
  string aps_token = 3; //ログインのタイミングでaps tokenを登録
}

message FanSignInResponse {
  string api_token = 1;
  string uuid = 2;
}

message FanRefreshTokenRequest {
  string old_token = 1;
}

message FanRefreshTokenResponse {
  string new_token = 1;
}

//firebase-access-tokenはheaderに付与
message InfluencerSignInRequest {
  string email = 1;
  string aps_token = 2; //ログインのタイミングでaps tokenを登録
}

message InfluencerSignInResponse {
  string api_token = 1;
  string influencer_uuid = 2;
}

message InfluencerRefreshTokenRequest {
  string old_token = 1;
}

message InfluencerRefreshTokenResponse {
  string new_token = 1;
}

message InfluencerSignUpRequest {
  string display_name = 1;                       // 表示される名前, 必須
  string annotation_id = 2;                      // @xxx のようなアノテーションID, 必須
  string email = 3;                              // email, 必須
  string phone_number = 4;                       // ex) +81812341234, 必須
  string prefecture = 5;                         // 都道府県
  string address = 6;                            // 住所
  string introduction = 7;                       // 自己紹介
  string main_square_image_uri = 8;              // 正方形の編集不可能なプロフィール画像URI, 必須
  string main_rectangle_image_uri = 9;          // 長方形の編集不可能なプロフィール画像URI, 必須
  string password = 10;                          // パスワード, 必須
  string first_name = 11;                        // 名
  string last_name = 12;                         // 性
  string office = 13;                            // 所属事務所
  Sex sex = 14;                                     //性別
  enum Sex {
    unknown = 0;                                   //未定義
    man = 1;                                       //男性
    woman = 2;                                     //女性
    undefined = 3;                                 //女性
  }
  repeated Genre genre = 15;                       //influencerのジャンル
  repeated string image_uris = 16;                 //influencerのジャンル
  repeated Topic topic = 17;                       // トピック
  string twitter_url = 18;                         //influencerのTwitterURL
  string instagram_url = 19;                       //influencerのInstagramURL
  string tiktok_url = 20;                          //influencerのTikTokURL
  string youtube_url = 21;                         //influencerのYouTubeURL
  string custom_link_name = 22;                    //influencerのオリジナルリンク表示名
  string custom_link_url = 23;                          //influencerのオリジナルリンクURL
}

message InfluencerSignUpResponse {
  string uuid = 1;                        //annotation_id ex) @hogehoge
}


