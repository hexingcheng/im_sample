syntax = "proto3";
option go_package = "./;grpc";

package grpc;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "reservation.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "fan.proto";

service FanService {
  //fanに通知を送ります
  //
  // gatewayで公開しない
  rpc Notification(FanNotificationRequest) returns (FanNotificationResponse) {}
  // fanを取得します
  //
  // type=fanのみ
	rpc GetFan (GetFanRequest) returns (GetFanResponse) {
      option (google.api.http) = {
        get: "/v1/fans/{uuid}"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        description: "Get user's id and name"
        extensions: {
          key: "x-hoge";
          value {
            string_value: "integer";
          }
        };
        security: {};
        responses: {
          key: "404";
          value: {
            description: "fan uuidが存在しない時(code = NOT_FOUND).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
      };
  }

	// インフルエンサーが通話中に並んでいるファン一覧を返します
  //
  // type=influencerかつ自分のuuidのみ
	rpc ListByFanMeetingID (ListByFanMeetingIDRequest) returns (ListByFanMeetingIDResponse) { //fanmeeting時の次のfanを返すメソッド
      option (google.api.http) = {
        get: "/v1/fans/fan-meeting-id/{fan_meeting_id}"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "404";
          value: {
            description: "fan uuidが存在しない時(code = NOT_FOUND).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
      };
  }

	// ファンの情報を更新します
  //
  // type=fanかつ自分のuuidのみ
  rpc UpdateFan (UpdateFanRequest) returns (Fan) {
      option (google.api.http) = {
        put: "/v1/fans"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "400";
          value: {
            description: "annotation idがorion filterに引っかかった時(code = ORION_FILTER_ANNOTATION_ID).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
        responses: {
          key: "404";
          value: {
            description: "fan uuidが存在しない時(code = NOT_FOUND).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
        responses: {
          key: "409";
          value: {
            description: "annotation idが重複した場合(code = ALREADY_EXIST_ANNOTATION_ID).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
      };
  }

	// ファンのプロフィール画像を更新します
  //
  // type=fanかつ自分のuuidのみ
  rpc UpdateImageURIFan (UpdateImageURIFanRequest) returns (UpdateImageURIFanResponse) {
      option (google.api.http) = {
        put: "/v1/fans/image_uri"
        body: "*"
      };
  }

  // only own fan
  rpc UpdateDisplayNameFan (UpdateDisplayNameFanRequest) returns (UpdateDisplayNameFanResponse) {
      option (google.api.http) = {
        put: "/v1/fans/display_name"
        body: "*"
      };
  }
	// ファンの自己紹介を更新します
  //
  // type=fanかつ自分のuuidのみ
  rpc UpdateIntroductionFan (UpdateIntroductionFanRequest) returns (UpdateIntroductionFanResponse) {
      option (google.api.http) = {
        put: "/v1/fans/introduction"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "400";
          value: {
            description: "introductionがvalidationに引っかかった時(code = VALIDATION_INTRODUCTION).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
      };
  }

	// ファンのパスワードを更新します
  //
  // type=fanかつ自分のuuidのみ
  rpc UpdatePasswordFan (UpdatePasswordFanRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/fans/password"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "400";
          value: {
            description: "introductionがvalidationに引っかかった時(code = VALIDATION_PASSWORD).";
						schema: {
							json_schema: {
								ref: ".ErrorResponse";
							}
						}
          }
        };
      };
  }

	// ファンのvoip tokenを更新します
  //
  // type=fanかつ自分のuuidのみ
  rpc UpdateVoipTokenFan (UpdateVoipTokenFanRequest) returns (UpdateVoipTokenFanResponse) {
    option (google.api.http) = {
      put: "/v1/fans/voip_token"
       body: "*"
    };
  }

  // ファンのemailを更新します
  //
  // jwt firebase
  rpc UpdateEmailFan (UpdateEmailFanRequest) returns (UpdateEmailFanResponse) {
    option (google.api.http) = {
      put: "/v1/fans/email"
      body: "*"
    };
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {};
			responses: {
				key: "400";
				value: {
					description: "introductionがvalidationに引っかかった時(code = VALIDATION_EMAIL).";
					schema: {
						json_schema: {
							ref: ".ErrorResponse";
						}
					}
				}
			};
		};
  }

	// ファンを論理削除します
  //
  // type=fanかつ自分のuuidのみ
  rpc DeleteFan (DeleteFanRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/v1/fans/delete"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {};
			responses: {
				key: "404";
				value: {
          description: "fan uuidが存在しない時(code = NOT_FOUND).";
					schema: {
						json_schema: {
							ref: ".ErrorResponse";
						}
					}
				}
			};
		};
  }

	// ファンの画像をuploadします
  //
  // type=fanのみ
  rpc UploadFanImage (UploadFanImageRequest) returns (UploadFanImageResponse) {
		option (google.api.http) = {
			post: "/v1/fans/upload"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {};
			responses: {
				key: "400";
				value: {
          description: "2MB以上のdataを送った時(code = IMAGE_SIZE_OVER_1MB).";
					schema: {
						json_schema: {
							ref: ".ErrorResponse";
						}
					}
				}
			};
		};
  }
}

enum Option {
  nomarl = 0;
  pre = 1; //事前にannotetion id と introduction の重複チェック
}

message UpdateIntroductionFanRequest {
  string introduction = 1;
  string uuid = 2;
  Option option =3;
}

message UpdateIntroductionFanResponse {
  string introduction = 1;
}

message UpdateImageURIFanRequest {
  string image_uri = 1;
  string uuid = 2;
}

message UpdateImageURIFanResponse {
  string image_uri = 1;
}

message UpdateDisplayNameFanRequest {
  string display_name = 1;
  string uuid = 2;
  Option option =3;
}

message UpdateDisplayNameFanResponse {
  string display_name = 1;
}

message UploadFanImageRequest {
  bytes image_byte = 1;
}
message UploadFanImageResponse {
  string image_uri = 1;
}

message GetFanRequest {
  string uuid = 1;
}

message GetFanResponse {
  Fan fan = 1;
  uint32 follow_num = 2;     // followしている人の人数
}

message ListByFanMeetingIDRequest {
  uint32 fan_meeting_id = 1;
}

message ListByFanMeetingIDResponse {
  message Result {
    Fan fan = 1;
    ReservationState state = 2;          //予約の状態
    uint32 reservation_id = 3;           //fan meetingの予約ID
  }
  repeated Result results = 1;
}


message UpdateFanRequest {
  Fan fan = 1;
  Option option =2;
}

//firebase-access-tokenはheaderに付与
message UpdatePasswordFanRequest {
  string email = 1;
  string password = 2;
}

message UpdateVoipTokenFanRequest {
  string voip_token = 1;
  string uuid = 2;
}

message UpdateVoipTokenFanResponse {
  string voip_token = 1;
}

message UpdateEmailFanRequest {
  string email = 1;
  string uuid = 2;
}

message UpdateEmailFanResponse {
  string email = 1;
}

message DeleteFanRequest {
  string uuid = 1;
  repeated ReasonCancelMembership reason_cancel_membership = 2;
  string body = 3;
}


message FanNotificationRequest {
  repeated string fan_uuids = 1;
  Segment segment = 2;
  enum Segment {
    all = 0;
    designate = 1;
  }
  string message = 3;
  string title = 4;
  string subtitle = 5;
}

message FanNotificationResponse {
  repeated string invalid_fan_uuids = 1;
}
