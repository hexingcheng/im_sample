syntax = "proto3";
option go_package = "./;grpc";

package grpc;
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "influencer.proto";
import "fanmeeting.proto";
import "protoc-gen-swagger/options/annotations.proto";

service FanMeetingService {
  //ファンミーティングを始めるとき or 予定を作成するとき
  //only own influencer
  rpc CreateFanMeeting (CreateFanMeetingRequest) returns (CreateFanMeetingResponse) {
      option (google.api.http) = {
        post: "/v1/fan-meetings"
        body: "*"
      };
  }
  //開催予定を変更したいとき or 予定のあるファンミーティングを始めるとき
  //only own influencer
  rpc UpdateFanMeeting (UpdateFanMeetingRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        put: "/v1/fan-meetings"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "400";
          value: {
            description: "存在しないitemcode(code = INVALID_ITEM_CODE).";
            schema: {
                json_schema: {
                    ref: ".ErrorResponse";
                }
            }
          }
        };
        responses: {
          key: "404";
          value: {
            description: "not found(code = NOT_FOUND)";
            schema: {
              json_schema: {
                ref: ".ErrorResponse";
              }
            }
          }
        }
        responses: {
          key: "409";
          value: {
            description: "state=2でリクエストきた時，すでにファンミーティングが開始されていた場合(code = ALREADY_START_FAN_MEETING)";
            schema: {
              json_schema: {
                ref: ".ErrorResponse";
              }
            }
          }
        }
      };
  }
  rpc GetFanMeeting (GetFanMeetingRequest) returns (GetFanMeetingResponse) {
      option (google.api.http) = {
        get: "/v1/fan-meetings/id/{id}"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "404";
          value: {
            description: "not found(code = NOT_FOUND)";
            schema: {
              json_schema: {
                ref: ".ErrorResponse";
              }
            }
          }
        }
      };
  }
  //ファンミーティングのstateによってインフルエンサを返す(futureの場合はnowのインフルエンサを除外して返す)
  rpc ListFanMeetings (ListFanMeetingsRequest) returns (ListFanMeetingsResponse) {
      option (google.api.http) = {
        get: "/v1/fan-meetings"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        security: {};
        responses: {
          key: "400";
          value: {
            description: "存在しないstate(code = INVALID_ARGUMENT).";
            schema: {
                json_schema: {
                    ref: ".ErrorResponse";
                }
            }
          }
        }
      };
  }
  //ジャンルを指定し，インフルエンサーを返す
  rpc ListFanMeetingsByGenre (ListFanMeetingsByGenreRequest) returns (ListFanMeetingsByGenreResponse) {
      option (google.api.http) = {
        get: "/v1/fan-meetings/genre/{genre}"
      };
  }

  // テンセントのIM logを送信
  //only own influencer
  rpc UploadTencentInstantMessageLogByFanMeeting (UploadTencentInstantMessageLogByFanMeetingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/fan-meetings/upload/tencent-log/im"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "401";
        value: {
          description: "unauthenticated(code = UNAUTHENTICATED)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }

  // テンセントのLiteAV logを送信
  //only own influencer
  rpc UploadTencentLiteAVLogByFanMeeting (UploadTencentLiteAVLogByFanMeetingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/fan-meetings/upload/tencent-log/lite-av"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "401";
        value: {
          description: "unauthenticated(code = UNAUTHENTICATED)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }


  //トピックを指定し，インフルエンサーを返す
  rpc ListFanMeetingsByTopic (ListFanMeetingsByTopicRequest) returns (ListFanMeetingsByTopicResponse) {
    option (google.api.http) = {
      get: "/v1/fan-meetings/topic/{topic}"
    };
  }
  //インフルエンサーUUID、ファンミーティングのstateによってファンミーティング一覧を返す
  //次回開催予定一覧を取得する 
  rpc ListFanMeetingsByInfluencerUUID (ListFanMeetingsByInfluencerUUIDRequest) returns (ListFanMeetingsByInfluencerUUIDResponse) {
    option (google.api.http) = {
      get: "/v1/fan-meetings/influencers/{influencer_uuid}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }
  //インフルエンサーUUIDから予約が成立したファンミーティング一覧を返す
  rpc ListFanMeetingsWithReservationOnlyByInfluencerUUID (ListFanMeetingsWithReservationOnlyByInfluencerUUIDRequest) returns (ListFanMeetingsWithReservationOnlyByInfluencerUUIDResponse) {
    option (google.api.http) = {
      get: "/v1/fan-meetings/reserved/influencers/{influencer_uuid}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }
  //開催したファンミーティングの覗きの総数を返す
  rpc GetTotalNozokiNumByFanMeeting (GetTotalNozokiNumByFanMeetingRequest) returns (GetTotalNozokiNumByFanMeetingResponse) {
    option (google.api.http) = {
        get: "/v1/fan-meetings/id/{id}/nozoki"
      };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "400";
        value: {
          description: "開始されてないfan meetingを指定した時(code = NOT_START_FAN_MEETING_MESSAGE)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }
  //ファンミーティングに参加してるファンを退出させる
  rpc RemoveFanByFanMeeting (RemoveFanByFanMeetingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
        post: "/v1/fan-meetings/id/{id}/remove/fan"
      };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {};
      responses: {
        key: "404";
        value: {
          description: "not found(code = NOT_FOUND)";
          schema: {
            json_schema: {
              ref: ".ErrorResponse";
            }
          }
        }
      }
    };
  }
}

message CreateFanMeetingRequest {
  string influencer_uuid = 1;                 // influencer uuid
  string item_code = 2;                       // ファンミーティングの価格(コイン)
  IsExtension is_extension = 3;               // このファンミーティングで延長できるか
  uint32 limited_people = 4;                  // ファンが参加できる人数上限
  google.protobuf.Timestamp event_date = 5;   // ファンミーティング開催日
  uint32 seconds_per_reservation = 6;         // ファンミーティング1回あたりの基本秒数
  FanMeetingState state = 7;                  // ファンミーティングの状態
  FanmeetingStyle style = 8;                 // ファンミーティングのスタイル
}

message UpdateFanMeetingRequest {
  uint32 id = 1;                              // id
  string item_code = 2;                       // ファンミーティングの価格(コイン)
  IsExtension is_extension = 3;               // このファンミーティングで延長できるか
  uint32 limited_people = 4;                  // ファンが参加できる人数上限
  google.protobuf.Timestamp event_date = 5;   // ファンミーティング開催日
  uint32 seconds_per_reservation = 6;         // ファンミーティング1回あたりの基本秒数
  FanMeetingState state = 7;                  // ファンミーティングの状態
  string influencer_uuid = 8;                 // influencer uuid
}

message CreateFanMeetingResponse {
  uint32 id = 1;
}

message GetFanMeetingRequest {
  uint32 id = 1;
  string fan_uuid = 2;
}

message GetFanMeetingResponse {
  FanMeeting fan_meeting = 1;
  uint32 wait_seconds = 2;                    // 約何秒待ちか
  bool is_soldout = 3;                        // 売り切れか
  bool is_reservation = 4;                    // 予約しているか
}

message GetTotalNozokiNumByFanMeetingRequest {
  uint32 id = 1;
}

message GetTotalNozokiNumByFanMeetingResponse {
  uint32 nozoki_num = 1;                    //覗きの総数
}

message RemoveFanByFanMeetingRequest {
  uint32 id = 1;
}

message UpdateStateFanMeetingRequest {
  uint32 id = 1;
  FanMeetingState state = 2;
}

message ListFanMeetingsRequest {
  string page_token = 1;
  FanMeetingState state = 2;
  string fan_uuid = 3;
}

message ListFanMeetingsResponse {
  repeated FanMeetingAndReserved fan_meeting_and_reserved = 1;
  string next_page_token = 2;
}

message ListFanMeetingsByGenreRequest {
  string page_token = 1;
  Genre genre = 2;
  string fan_uuid = 3;
}

message ListFanMeetingsByGenreResponse {
  repeated FanMeetingAndReserved fan_meeting_and_reserved = 1;
  string next_page_token = 2;
}

message UploadThumbnailMovieRequest {
  uint32 id = 1;
  bytes movie_byte = 2;
}

message UploadTencentInstantMessageLogByFanMeetingRequest {
  string influencer_uuid = 1;
  string file_name = 2;
  bytes log_file_byte = 3;
}

message UploadTencentLiteAVLogByFanMeetingRequest {
  string influencer_uuid = 1;
  string file_name = 2;
  bytes log_file_byte = 3;
}

message ListFanMeetingsByTopicRequest {
  string page_token = 1;
  Topic topic = 2;
  string fan_uuid = 3;
}

message ListFanMeetingsByTopicResponse {
  repeated FanMeetingAndReserved fan_meeting_and_reserved = 1;
  string next_page_token = 2;
}

message ListFanMeetingsByInfluencerUUIDRequest {
  string fan_uuid = 1;
  string influencer_uuid = 2;
  FanMeetingState state = 3;
}

message ListFanMeetingsByInfluencerUUIDResponse {
  repeated FanMeeting fan_meeting = 1;
}

message ListFanMeetingsWithReservationOnlyByInfluencerUUIDRequest {
  string influencer_uuid = 1;
  int64 next_seek_date  = 2;
}

message ListFanMeetingsWithReservationOnlyByInfluencerUUIDResponse {
  repeated FanMeetingAndNumberOfReservation fan_meetings = 1;
  int64 next_seek_date  = 2;
}
